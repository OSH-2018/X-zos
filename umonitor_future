## 未来扩展
  我们的umonitor已经可以在rumpkernel的平台上通过对unikernel源代码的修改，通过网络通信的方式将unikernel中我们想要的调试信息输出到制定文件中，初期制定的目标已经达到，但是，要看到unikrnel这一概念在未来可能的广泛应用的话，对于调试方面显然还需要更加多样化，更方便的功能需求，因此，我们的项目仍然有很多发展的空间。
  首先，我们现在的实现仍然主要在rumprun的平台上，然而现在虽然unikernel仍处于一个非常早期的发展阶段，但是已经有诸如Clive，ClickOS，OSv，IncludeOs等等较为成熟的实现，且每一种实现都有其擅长的领域，如：ClickOS用于构建网络功能虚拟化;Clive用go语言编写，工作于分布式和云计算环境中;IncludeOS在云中运行C++服务等等。而在某些情况下，这些不同的unikernel实现甚至可能同时使用，并且需要调试。在这样的情况下，一个unikernel的调试工具必然需要提供一个通用的接口，以实现对不同种类unikernel的支持。我们的umonitor已经实现了能同时对多个unikerlnel的调试，所以下一步的目标就应该是实现对多种unikernel的通用接口。使其能够方便的支持现阶段较为成熟的unikernel实现的同时也能够通过用户友好的配置界面对其他unikernel进行支持。
  然后，在umonitor的实现中，直接调用了TUN/TAP设备，方便地模拟了网络行为。所以如果能力允许的话，后续的工作也可能放在寻找性能更好的替代或者有能力的话自己实现定制化的接口。
  再进一步，我们的umonitor在运行之后实际上仍然只能被动地接受被调试的unikernel输出的调试信息，这样虽然能够在一次设置后找到对应的错误信息出现的位置，但是想要在unikernel运行中途添加调试信息输出或者更进一步的设置断点和逐句执行都还做不到，虽然这些都属于一个完整的调试工具所必须的功能，但是由于实现非常复杂而且所需知识已经超出现在所学且考虑到时间问题，所以暂时无法完整实现，而当在后面的学习中如果掌握了所需知识，交互式的调试也将会是一个主要的开发方向。
  考虑到很多需要通过在源代码中添加调试输出语句输出的信息，都是具有一定特征的，比如在每个函数调用时可能会需要提供栈，传入变量等信息，要求程序员在调试的时候手动在每个函数的开头处添加调试信息输出语句显然是不现实的，这也会对程序员造成很大的扎负担（说白了这样非常不友好）。所以，考虑在编译前对代码进行自动化的预处理。这一点，已经对c语言进行了一定程度上的实现，但是如果在C++语言中，由于类，重载等语法，实现起来是非常复杂的。对多种编程语言的支持也成为一个重要的功能。同时，根据具体调试目的的不同，需要的调试信息类型也不尽相同，提供图形化的调试选项界面也是一个提高使用体验的关键点。
  综合看起来，我们的umonitor工程只是在改善unikernel调试的路上开了一个头，可以说先是实现了一个概念性的框架，后续还有很多可以做的工作。























